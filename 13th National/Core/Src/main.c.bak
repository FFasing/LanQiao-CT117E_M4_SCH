/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void eep_write(u8 addr,u8 data)
{
	I2CStart();
	I2CSendByte(0xa0);
	I2CWaitAck();
	I2CSendByte(addr);
	I2CWaitAck();
	I2CSendByte(data);
	I2CWaitAck();
	I2CStop();
	HAL_Delay(10);
}
u8 eep_read(u8 addr)
{
	u8 data;
	I2CStart();
	I2CSendByte(0xa0);
	I2CWaitAck();
	I2CSendByte(addr);
	I2CWaitAck();
	I2CStop();
	HAL_Delay(100);
	
	I2CStart();
	I2CSendByte(0xa1);
	I2CWaitAck();
	data=I2CReceiveByte();
	I2CSendNotAck();
	I2CStop();
	HAL_Delay(10);
	return data;
}
double va5,va4;
double V_PA4[100],V_PA5[100],F_PA1,A,T,H;
int tim_1s,tim_1s_con;
u8 lcd_mod=0;//0-shuju 1-canshu 2-jilu
char X,Y,N;
u8 b1,b11,b2,b22,b3,b33,b4,b44;
u8 ADC_CON;
double A4_A,A4_T,A4_H;
double A5_A,A5_T,A5_H;
u8 zero=0;
u8 FREQ_MOD=0;//0-BEI 1-FEN
u8 lcd3_mod=0;
u8 rx[15],rx_len,rx_ok;
int psc;
u8 lcd_turn;
int tim100,ld3;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance==TIM17)
	{
		if(tim_1s_con)
			if(++tim_1s==1000)
			{
				tim_1s_con=0;
				tim_1s=0;
				N=0;
			}
		if(++tim100==100)
		{
			tim100=0;
			ld3^=1;
		}
	}
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance==TIM2)
	{
		F_PA1=1000000.0/HAL_TIM_ReadCapturedValue(&htim2,TIM_CHANNEL_2);
	}
}
void lcd(void)
{
	u8 text[25];
	if(lcd_mod==0)
	{
		sprintf((char *)text,"        DATA          ");
		LCD_DisplayStringLine(Line1, (unsigned char *)text);
		if(N==0)
		{
			sprintf((char *)text,"     V_PA4:0.00       ");
			LCD_DisplayStringLine(Line3, (unsigned char *)text);
			sprintf((char *)text,"     V_PA5:0.00       ");
			LCD_DisplayStringLine(Line4, (unsigned char *)text);
		}
		else
		{
		  sprintf((char *)text,"     V_PA4:%.1f       ",V_PA4[N-1]);
		  LCD_DisplayStringLine(Line3, (unsigned char *)text);
		  sprintf((char *)text,"     V_PA5:%.1f       ",V_PA5[N-1]);
		  LCD_DisplayStringLine(Line4, (unsigned char *)text);
		}
		sprintf((char *)text,"     F_PA1:%.0f       ",F_PA1);
		LCD_DisplayStringLine(Line5, (unsigned char *)text);
	}
	if(lcd_mod==1)
	{
	  sprintf((char *)text,"        PARA          ");
	  LCD_DisplayStringLine(Line1, (unsigned char *)text);
	  sprintf((char *)text,"     X=:%d       ",X);
	  LCD_DisplayStringLine(Line3, (unsigned char *)text);
	  sprintf((char *)text,"     Y=:%d       ",Y);
	  LCD_DisplayStringLine(Line4, (unsigned char *)text);
	}
	if(lcd_mod==2)
	{
	  if(lcd3_mod==0) sprintf((char *)text,"        REC-PA4       ");
	  if(lcd3_mod==1) sprintf((char *)text,"        REC-PA5       ");
	  LCD_DisplayStringLine(Line1, (unsigned char *)text);
	  sprintf((char *)text,"     N=:%d       ",N);
	  LCD_DisplayStringLine(Line3, (unsigned char *)text);
	  sprintf((char *)text,"     A=:%.2f       ",A);
	  LCD_DisplayStringLine(Line4, (unsigned char *)text);
	  sprintf((char *)text,"     T=:%.2f       ",T);
	  LCD_DisplayStringLine(Line5, (unsigned char *)text);
	  sprintf((char *)text,"     H=:%.2f       ",H);
	  LCD_DisplayStringLine(Line6, (unsigned char *)text);
	}
}
void key(void)
{	
	//0-shuju 1-canshu 2-jilu
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)==0)	b1=1;
	else b1=0;
	if(b1==1&&b11==0)
	{
		b11=1;
		if(++lcd_mod==3) lcd_mod=0;
		LCD_Clear(Black);
	}if(b1==0&&b11==1) b11=0;
	
	
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)==0)	b2=1;
	else b2=0;
	if(b2==1&&b22==0)
	{
		b22=1;
		if(lcd_mod==1)
		{
			if(++X>=5) X=1;
			eep_write(1,X);
		}
	}if(b2==0&&b22==1) b22=0;
	
	
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)==0)	b3=1;
	else b3=0;
	if(b3==1&&b33==0)
	{
		b33=1;
		if(lcd_mod==1)
		{
			if(++Y>=5) Y=1;
			eep_write(0,Y);
		}
	}if(b3==0&&b33==1) b33=0;
	
	
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==0)	b4=1;
	else b4=0;
	if(b4==1&&b44==0)
	{
		b44=1;
		if(lcd_mod==0)
		{
			ADC_CON=1;
		}
		if(lcd_mod==1)
		{
			FREQ_MOD^=1;
		}
		if(lcd_mod==2)
		{
			tim_1s_con=1;
			tim_1s=0;
		}
	}
	if(b4==0&&b44==1) 
	{
		if(tim_1s_con==1)
		{
			lcd3_mod^=1;
			tim_1s_con=0;
			tim_1s=0;
		}
		b44=0;
	}
}
void uart(void)
{
	u8 t[10],i,n=0;
	if(rx_ok)
	{
		rx_ok=0;
		if(strcmp((char *)rx,"X")==0)
		{
			sprintf((char *)t,"X:%d",X);
			HAL_UART_Transmit(&huart1,t,3,HAL_MAX_DELAY);
		}
		if(strcmp((char *)rx,"Y")==0)
		{
			sprintf((char *)t,"Y:%d",Y);
			HAL_UART_Transmit(&huart1,t,3,HAL_MAX_DELAY);
		}
		if(strcmp((char *)rx,"PA1")==0)
		{
			sprintf((char *)t,"PA1:%.0f",F_PA1);
			HAL_UART_Transmit(&huart1,t,strlen((char *)t),HAL_MAX_DELAY);
		}
		if(strcmp((char *)rx,"PA4")==0)
		{
			sprintf((char *)t,"PA4:%.2f",V_PA4[N-1]);
			HAL_UART_Transmit(&huart1,t,strlen((char *)t),HAL_MAX_DELAY);
		}
		if(strcmp((char *)rx,"PA5")==0)
		{
			sprintf((char *)t,"PA5:%.2f",V_PA5[N-1]);
			HAL_UART_Transmit(&huart1,t,strlen((char *)t),HAL_MAX_DELAY);
		}
		if(strcmp((char *)rx,"#")==0)
		{
			lcd_turn^=1;
			if(lcd_turn)
			{
				LCD_Clear(Black);
				LCD_WriteReg(R1, 0x0000);   // set SS and SM bit		  //0x0100
				LCD_WriteReg(R96, 0x2700);  // Gate Scan Line		  0xA700
			}
			else
			{
				LCD_Clear(Black);
				LCD_WriteReg(R1, 0x0100);   // set SS and SM bit		  //0x0100
				LCD_WriteReg(R96, 0xA700);  // Gate Scan Line		  0xA700
			}
		}
		memset(rx,'\0',sizeof(rx));
	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC2_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_TIM17_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LCD_Init();
	LCD_SetBackColor(Black);
	LCD_SetTextColor(White);
	LCD_Clear(Black);
	HAL_TIM_Base_Start_IT(&htim17);
	HAL_ADCEx_Calibration_Start(&hadc2,ADC_SINGLE_ENDED);
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_2);
	I2CInit();
	HAL_Delay(10);
	X=eep_read(1);
	HAL_Delay(10);
	Y=eep_read(0);
	HAL_Delay(10);
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
	__HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
	__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
	while (1)
	{
		HAL_GPIO_WritePin(GPIOC,(uint16_t)0xFF00,1);
		if(FREQ_MOD==0)	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,0);
		if(FREQ_MOD==1)	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,0);
		if(V_PA4[N-1]>V_PA5[N-1])	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,ld3);
		if(lcd_turn==0) HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,0);
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,1);
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,0);
		lcd();key();uart();
		if(FREQ_MOD==0) TIM3->PSC=80000000.0/100.0/(F_PA1*X);
		if(FREQ_MOD==1) TIM3->PSC=80000000.0/100.0/(F_PA1/X);
		psc=TIM3->PSC;
		__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_2,50);
		HAL_ADC_Start(&hadc2);
		va5=HAL_ADC_GetValue(&hadc2)/4090.0*3.3;
		HAL_ADC_Start(&hadc2);
		va4=HAL_ADC_GetValue(&hadc2)/4090.0*3.3;
		if(ADC_CON)
		{
			ADC_CON=0;
			N++;
			V_PA4[N-1]=va4;
			V_PA5[N-1]=va5;
			
			if(N==1)
			{
				A4_A=V_PA4[N-1];A5_A=V_PA5[N-1];
				A4_T=V_PA4[N-1];A5_T=V_PA5[N-1];
				A5_H=V_PA5[N-1];A4_H=V_PA4[N-1];
			}
			if(N>1)
			{
				if(va4>=A4_A)	A4_A=va4;
				if(va5>=A5_A)	A5_A=va5;
				if(va4<=A4_T)	A4_T=va4;
				if(va5<=A4_T)	A4_T=va5;
			}
			
			int i;
			double sum_a4=0,sum_a5=0;
			for(i=0;i<N;i++)
			{
				sum_a4+=V_PA4[i];
				sum_a5+=V_PA5[i];
			}
			A4_H=sum_a4/N;
			A5_H=sum_a5/N;
		}
		if(N==0)
		{
			A=0;T=0;H=0;
		}
		else if(lcd3_mod==0)
		{
			A=A4_A;
			T=A4_T;
			H=A4_H;
		}
		else if(lcd3_mod==1)
		{
			A=A5_A;
			T=A5_T;
			H=A5_H;
		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
  RCC_OscInitStruct.PLL.PLLN = 20;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
