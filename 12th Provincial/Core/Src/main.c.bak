/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
u8 lcd_mod=0;
int cnbr,vnbr,idle=8;
double cnbr_price=3.5,vnbr_price=2;
u8 b1,b11,b2,b22,b3,b33,b4,b44;
u8 pa7_mod=0;
char rx[30];
char rx_len,rx_count,rx_ok;
u8 x=0;
u8 chepai_1[8],chepai_2[8],chepai_3[8],chepai_4[8];
int year_in[8],month_in[8],day_in[8],hour_in[8],min_in[8],second_in[8];
u8 chelei=0;
u8 tx[25];
u8 out=0;
u8 chexin[8];
void lcd(void)
{
	u8 t[25];
	if(lcd_mod==0)
	{
		sprintf((char *)t,"       Data        ");
		LCD_DisplayStringLine(Line1, (unsigned char *)t);
		sprintf((char *)t,"   CNBR:%d         ",cnbr);
		LCD_DisplayStringLine(Line3, (unsigned char *)t);
		sprintf((char *)t,"   VNBR:%d         ",vnbr);
		LCD_DisplayStringLine(Line5, (unsigned char *)t);
		sprintf((char *)t,"   IDLE:%d         ",idle);
		LCD_DisplayStringLine(Line7, (unsigned char *)t);
	}
	if(lcd_mod==1)
	{
		sprintf((char *)t,"       Para        ");
		LCD_DisplayStringLine(Line1, (unsigned char *)t);
		sprintf((char *)t,"   CNBR:%.2f         ",cnbr_price);
		LCD_DisplayStringLine(Line3, (unsigned char *)t);
		sprintf((char *)t,"   VNBR:%.2f         ",vnbr_price);
		LCD_DisplayStringLine(Line5, (unsigned char *)t);
	}
}
void key(void)
{
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)==0) b1=1;
	else b1=0;
	if(b1==1&&b11==0)
	{
		b11=1;
		lcd_mod^=1;
		LCD_Clear(Black);
	}if(b11==1&&b1==0) b11=0;
	
	if(lcd_mod==1)
	{
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)==0) b2=1;
		else b2=0;
		if(b2==1&&b22==0)
		{
			b22=1;
			cnbr_price+=0.5;
			vnbr_price+=0.5;
		}if(b22==1&&b2==0) b22=0;
		
		
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)==0) b3=1;
		else b3=0;
		if(b3==1&&b33==0)
		{
			b33=1;
			cnbr_price-=0.5;
			vnbr_price-=0.5;
			if(cnbr_price<=0) cnbr_price=0;
			if(vnbr_price<=0) vnbr_price=0;
		}if(b33==1&&b3==0) b33=0;
	}
	
	
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==0) b4=1;
	else b4=0;
	if(b4==1&&b44==0)
	{
		b44=1;
		pa7_mod^=1;
	}if(b44==1&&b4==0) b44=0;
}
void uart(void)
{
	int i,index;
	char che_1,che_2,che_3,che_4;
	char year,month,day,hour,min,second;
	if(rx_ok)
	{
		rx_ok=0;
		if(rx_count==24)
		{
			if(rx[4]==':'&&rx[9]==':')
			{
				chelei=0;
				if(strncmp((char *)rx,"CNBR",4)==0) chelei=1;
				if(strncmp((char *)rx,"VNBR",4)==0) chelei=2;
				che_1=rx[5];che_2=rx[6];che_3=rx[7];che_4=rx[8];
				year=rx[10]*10+rx[11];month=rx[23]*10+rx[13];
				day=rx[14]*10+rx[15];hour=rx[16]*10+rx[17];
				min=rx[18]*10+rx[19];second=rx[20]*10+rx[21];
				out=0;
				for(i=0;i<8;i++)
				{
					if(che_1==chepai_1[i])
						if(che_2==chepai_2[i])
							if(che_3==chepai_3[i])
								if(che_4==chepai_4[i])
									if(chelei==chexin[i])
									{
										out=1;
										index=i;
									}
				}
				if(out==0&&chelei!=0)
				{
					chepai_1[8-idle]=rx[5];chepai_2[8-idle]=rx[6];
					chepai_3[8-idle]=rx[7];chepai_4[8-idle]=rx[8];
					year_in[8-idle]=year;
					month_in[8-idle]=month;
					day_in[8-idle]=day;
					hour_in[8-idle]=hour;
					min_in[8-idle]=min;
					second_in[8-idle]=second;
					chexin[8-idle]=chelei;
					idle--;
					if(chelei==1)	cnbr++;
					if(chelei==2)	vnbr++;
				}
				if(out==1&&chelei!=0)
				{
					int time;
					double price;
					time=hour-hour_in[index];
					if(min-min_in[index]!=0||second-second_in[index]!=0) 
						time=time+1;
					if(chelei==1) price=cnbr_price*time;
					if(chelei==2) price=vnbr_price*time;
					sprintf((char *)tx,"%c%c%c%c%c%c%c%c%c%c%d:%.2f",rx[0],rx[1],rx[2],rx[3],rx[4],rx[5],rx[6],rx[7],rx[8],rx[9],time,price);
					HAL_UART_Transmit(&huart1,tx,strlen((char *)tx),HAL_MAX_DELAY);
					idle++;
					if(chelei==1)	cnbr--;
					if(chelei==2)	vnbr--;
				}
				if(chelei==0) HAL_UART_Transmit(&huart1,(uint8_t *)"Error",5,HAL_MAX_DELAY);
			}
			else HAL_UART_Transmit(&huart1,(uint8_t *)"Error",5,HAL_MAX_DELAY);
		}
		else HAL_UART_Transmit(&huart1,(uint8_t *)"Error",5,HAL_MAX_DELAY);
		memset(rx,'\0',sizeof(rx));
	}	
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM17_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LCD_Init();
	LCD_SetBackColor(Black);
	LCD_SetTextColor(White);
	LCD_Clear(Black);
	HAL_TIM_PWM_Start(&htim17,TIM_CHANNEL_1);
	__HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
	__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  while (1)
  {
	  if(pa7_mod==1) __HAL_TIM_SetCompare(&htim17,TIM_CHANNEL_1,20);
	  if(pa7_mod==0) __HAL_TIM_SetCompare(&htim17,TIM_CHANNEL_1,0);
	  lcd();key();uart();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOC,(uint16_t)0xff00,1);
	  if(idle>0) HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,0);
	  if(pa7_mod) HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,0);
	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,1);
	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,0);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
  RCC_OscInitStruct.PLL.PLLN = 20;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
